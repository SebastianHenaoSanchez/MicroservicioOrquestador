/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.JsonApiBodyRequestNegocio;
import io.swagger.model.JsonApiBodyRequestOferta;
import io.swagger.model.JsonApiBodyRequestPersona;
import io.swagger.model.JsonApiBodyResponseErrors;
import io.swagger.model.JsonApiBodyResponseSuccessNegocio;
import io.swagger.model.JsonApiBodyResponseSuccessOferta;
import io.swagger.model.JsonApiBodyResponseSuccessPersona;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-08-28T17:05:48.141Z")

@Api(value = "editar", description = "the editar API")
public interface EditarApi {

    @ApiOperation(value = "actualizar un negocio existente", nickname = "editarNegociosPut", notes = "actualizacion de los datos de un negocio", response = JsonApiBodyResponseSuccessNegocio.class, tags={ "negocios", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "negocio editado", response = JsonApiBodyResponseSuccessNegocio.class),
        @ApiResponse(code = 400, message = "datos incompletos o incorrectos", response = JsonApiBodyResponseErrors.class) })
    @RequestMapping(value = "/editar/negocios",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<JsonApiBodyResponseSuccessNegocio> editarNegociosPut(@ApiParam(value = "negocio que va a ser editado" ,required=true )  @Valid @RequestBody JsonApiBodyRequestNegocio body);


    @ApiOperation(value = "actualizar un oferta existente", nickname = "editarOfertasPut", notes = "actualizacion de los datos de una oferta", response = JsonApiBodyResponseSuccessOferta.class, tags={ "ofertas", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "oferta editada", response = JsonApiBodyResponseSuccessOferta.class),
        @ApiResponse(code = 400, message = "no se pudo editar la oferta", response = JsonApiBodyResponseErrors.class) })
    @RequestMapping(value = "/editar/ofertas",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<JsonApiBodyResponseSuccessOferta> editarOfertasPut(@ApiParam(value = "oferta que va a ser editada" ,required=true )  @Valid @RequestBody JsonApiBodyRequestOferta body);


    @ApiOperation(value = "acctualizar una persona existente", nickname = "editarPersonasPut", notes = "", response = JsonApiBodyResponseSuccessPersona.class, tags={ "personas", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "persona editada", response = JsonApiBodyResponseSuccessPersona.class),
        @ApiResponse(code = 400, message = "datos incompletos o incorrectos", response = JsonApiBodyResponseErrors.class) })
    @RequestMapping(value = "/editar/personas",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<JsonApiBodyResponseSuccessPersona> editarPersonasPut(@ApiParam(value = "Pet object that needs to be added to the store" ,required=true )  @Valid @RequestBody JsonApiBodyRequestPersona body);

}
